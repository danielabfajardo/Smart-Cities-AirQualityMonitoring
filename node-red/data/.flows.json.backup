[
    {
        "id": "17bc7aeebae10c16",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a8cb1e729a2b76ed",
        "type": "mqtt-broker",
        "name": "mosquitto",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "37409ed0ed704cfc",
        "type": "telegram bot",
        "botname": "MyAirQualityMonitoringBot",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "testenvironment": false,
        "updatemode": "polling",
        "addressfamily": "",
        "pollinterval": 300,
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": 6667,
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": 8443,
        "publicbotport": 8443,
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "4439cfb539ede99d",
        "type": "telegram bot",
        "botname": "MyAirQualityManagerBot",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "testenvironment": false,
        "updatemode": "polling",
        "addressfamily": "",
        "pollinterval": 300,
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": 6667,
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": 8443,
        "publicbotport": 8443,
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "63af76c7f02179a7",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": 8086,
        "protocol": "http",
        "database": "database",
        "name": "InfluxDB",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influxdb:8086",
        "timeout": 10,
        "rejectUnauthorized": true
    },
    {
        "id": "ae13f6ea803c0377",
        "type": "debug",
        "z": "17bc7aeebae10c16",
        "name": "Print data format",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 100,
        "wires": []
    },
    {
        "id": "ee28238ae82ab55c",
        "type": "mqtt in",
        "z": "17bc7aeebae10c16",
        "name": "",
        "topic": "/smartcities/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a8cb1e729a2b76ed",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 160,
        "wires": [
            [
                "49c93715f58ab854"
            ]
        ]
    },
    {
        "id": "49c93715f58ab854",
        "type": "function",
        "z": "17bc7aeebae10c16",
        "name": "Data Preprocessing",
        "func": "// AQI Breakpoints Table\nconst AQI_BREAKPOINTS = {\n    pm2_5: [\n        { concentration: [0, 12], aqi: [0, 50] },\n        { concentration: [12.1, 35.4], aqi: [51, 100] },\n        { concentration: [35.5, 55.4], aqi: [101, 150] },\n        { concentration: [55.5, 150.4], aqi: [151, 200] },\n        { concentration: [150.5, 250.4], aqi: [201, 300] },\n        { concentration: [250.5, 350.4], aqi: [301, 400] },\n        { concentration: [350.5, 500.4], aqi: [401, 500] },\n    ],\n    pm10: [\n        { concentration: [0, 54], aqi: [0, 50] },\n        { concentration: [55, 154], aqi: [51, 100] },\n        { concentration: [155, 254], aqi: [101, 150] },\n        { concentration: [255, 354], aqi: [151, 200] },\n        { concentration: [355, 424], aqi: [201, 300] },\n        { concentration: [425, 504], aqi: [301, 400] },\n        { concentration: [505, 604], aqi: [401, 500] },\n    ]\n};\n\nfunction calculateAQI(pollutant, concentration) {\n    const breakpoints = AQI_BREAKPOINTS[pollutant];\n    if (!breakpoints) return null; // No breakpoints defined for this pollutant\n\n    for (let i = 0; i < breakpoints.length; i++) {\n        const { concentration: range, aqi } = breakpoints[i];\n        if (concentration >= range[0] && concentration <= range[1]) {\n            return Math.round(\n                ((aqi[1] - aqi[0]) / (range[1] - range[0])) * (concentration - range[0]) + aqi[0]\n            );\n        }\n    }\n    return null; // Return null if no match (e.g., out of range)\n}\n\n// Extract pollutant data from msg.payload\nconst sensorType = msg.payload.sensor_type;\nconst value = msg.payload.value;\n\nlet pm10AQI = null;\nlet pm2_5AQI = null;\n\n// Calculate AQI only for pollutants (e.g., PM2.5, PM10)\nif ([\"pm2_5\"].includes(sensorType)) {\n    pm2_5AQI = calculateAQI(\"pm2_5\", value);\n} else if ([\"pm10\"].includes(sensorType)) {\n    pm10AQI = calculateAQI(\"pm10\", value);\n}\n\n// Final AQI is the maximum of the two\nlet finalAQI = Math.max(pm10AQI, pm2_5AQI);\n\n// Add AQI and other data to msg.payload\nmsg.payload = {\n    fields: {\n        value: value,\n        aqi: finalAQI, // Calculated AQI (null if not applicable)\n    },\n    tags: {\n        sensor_id: msg.payload.sensor_id, // Sensor ID\n        city: msg.payload.city,           // City name\n        sensor_type: msg.payload.sensor_type, // Type of metric\n    },\n    measurement: \"sensor_data\", // Measurement name in InfluxDB\n    timestamp: msg.payload.time, // Timestamp for the data point\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 160,
        "wires": [
            [
                "0fef79229c570c5b"
            ]
        ]
    },
    {
        "id": "08b6c15c01518af0",
        "type": "telegram sender",
        "z": "17bc7aeebae10c16",
        "name": "MyAirQualityMonitoringBot",
        "bot": "37409ed0ed704cfc",
        "haserroroutput": false,
        "outputs": 1,
        "x": 800,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "b0ba56552de82c50",
        "type": "function",
        "z": "17bc7aeebae10c16",
        "name": "Threshold evaluation",
        "func": "const thresholds = global.get(\"thresholds\", \"file\") || {\n    pm2_5: 50,\n    pm10: 100,\n    co2: 1000,\n    no2: 50,\n    temperature: 45,\n    humidity: 95,\n    power_consumption: 1.5,\n};\n\n// Initialize data structures for alerts\nlet payload = msg.payload; \nlet alertsByCity = {};\nlet alertSummary = {};\n\n// Process each sensor entry\npayload.forEach(sensorData => {\n    const { fields, tags, timestamp } = sensorData;\n\n    // Check if the sensor type has a threshold defined\n    const metric = tags.sensor_type;\n    if (thresholds[metric] !== undefined && fields.value > thresholds[metric]) {\n        const city = tags.city;\n        const severity = (fields.value > thresholds[metric] * 1.25) ? \"Critical\" : \"Warning\";\n\n        // Initialize city alerts if not present\n        if (!alertsByCity[city]) {\n            alertsByCity[city] = [];\n            alertSummary[city] = { Critical: 0, Warning: 0 };\n        }\n\n        // Add alert to city-specific alerts\n        alertsByCity[city].push({\n            sensor: tags.sensor_id,\n            condition: `${metric.toUpperCase()} exceeds threshold: ${fields.value} (Threshold: ${thresholds[metric]})`,\n            severity,\n            timestamp\n        });\n\n        // Update alert summary for the city\n        alertSummary[city][severity]++;\n    }\n});\n\n// Build consolidated alert message\nif (Object.keys(alertsByCity).length > 0) {\n    let alertMessage = `üö® Smart Cities: Air Quality Alert üö®\\n\\n`;\n\n    // Add summary for each city\n    for (const city in alertSummary) {\n        alertMessage += `üìç City: ${city}\\n`;\n        alertMessage += `  - Critical Alerts: ${alertSummary[city].Critical}\\n`;\n        alertMessage += `  - Warnings: ${alertSummary[city].Warning}\\n\\n`;\n    }\n\n    // Add detailed alerts\n    alertMessage += `Detailed Alerts:\\n`;\n    for (const city in alertsByCity) {\n        alertsByCity[city].forEach(alert => {\n            alertMessage += `üìç City: ${city}\\n`;\n            alertMessage += `  - Sensor: ${alert.sensor}\\n`;\n            alertMessage += `  - Condition: ${alert.condition}\\n`;\n            alertMessage += `  - Severity: ${alert.severity}\\n`;\n            alertMessage += `  - Timestamp: ${new Date(alert.timestamp).toLocaleString()}\\n`;\n            alertMessage += `\\n`;\n        });\n    }\n\n    // Prepare message payload for Telegram\n    msg.payload = {\n        chatId: parseInt(env.get(\"NODE_RED_TELEGRAM_MONITORING_CHAT_ID\"), 10) || \"-4603413735\",\n        type: \"message\",\n        content: alertMessage.trim(),\n    };\n\n    return msg;\n} else {\n    return null; // No alerts to send\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 260,
        "wires": [
            [
                "08b6c15c01518af0"
            ]
        ]
    },
    {
        "id": "9efc7ad82e752d8b",
        "type": "telegram receiver",
        "z": "17bc7aeebae10c16",
        "name": "MyAirQualityManagerBot receiver",
        "bot": "4439cfb539ede99d",
        "saveDataDir": "",
        "filterCommands": false,
        "x": 170,
        "y": 480,
        "wires": [
            [
                "70e16229975928be"
            ],
            []
        ]
    },
    {
        "id": "70e16229975928be",
        "type": "function",
        "z": "17bc7aeebae10c16",
        "name": "Threshold configuration",
        "func": "// Fetch existing thresholds or use default ones\nlet thresholds = global.get(\"thresholds\") || {\n    pm2_5: 50,\n    pm10: 100,\n    co2: 1000,\n    no2: 50,\n    temperature: 45,\n    humidity: 95,\n    power_consumption: 1.5,\n};\n\nconst message = msg.payload.content;\nconst chatId = msg.payload.chatId;\n\n// Helper function to get units for each metric\nfunction getUnit(metric) {\n    const units = {\n        pm2_5: \"¬µg/m¬≥\",\n        pm10: \"¬µg/m¬≥\",\n        co2: \"ppm\",\n        no2: \"¬µg/m¬≥\",\n        temperature: \"¬∞C\",\n        humidity: \"%\",\n        power_consumption: \"kW\"\n    };\n    return units[metric] || \"\";\n}\n\n// Available commands template\nconst availableCommands = `\n‚ÑπÔ∏è *Available Commands:*\n1Ô∏è‚É£ /get_thresholds - View current thresholds.\n2Ô∏è‚É£ /set_threshold <metric> <value> - Update a threshold (e.g., /set_threshold pm2_5 45).\n`;\n\n// Handle /get_thresholds command\nif (message === \"/get_thresholds\") {\n    msg.payload = {\n        chatId: chatId,\n        type: \"message\",\n        content: `üìä *Current Thresholds:*\\n\\n${Object.entries(thresholds)\n            .map(([key, value]) => `*${key}:* ${value} ${getUnit(key)}`)\n            .join(\"\\n\")}`\n    };\n    return msg;\n}\n\n// Handle /set_threshold command\nif (message.startsWith(\"/set_threshold\")) {\n    const parts = message.split(\" \");\n    if (parts.length === 3) {\n        const metric = parts[1].toLowerCase(); // Metric in lowercase\n        const value = parseFloat(parts[2]); // Parse the new threshold value\n\n        if (thresholds.hasOwnProperty(metric)) {\n            if (isNaN(value) || value <= 0) {\n                msg.payload = {\n                    chatId: chatId,\n                    type: \"message\",\n                    content: `‚ùå Invalid value. Please provide a positive number for the threshold.`\n                };\n                return msg;\n            }\n\n            // Update the threshold value\n            thresholds[metric] = value;\n            global.set(\"thresholds\", thresholds); // Persist updated thresholds\n\n            msg.payload = {\n                chatId: chatId,\n                type: \"message\",\n                content: `‚úÖ Threshold for *${metric.toUpperCase()}* updated to ${value} ${getUnit(metric)}.`\n            };\n            return msg;\n        } else {\n            msg.payload = {\n                chatId: chatId,\n                type: \"message\",\n                content: `‚ùå Invalid metric. Available metrics: ${Object.keys(thresholds).join(\", \")}`\n            };\n            return msg;\n        }\n    } else {\n        msg.payload = {\n            chatId: chatId,\n            type: \"message\",\n            content: `‚ùå Invalid command format. Use: /set_threshold <metric> <value>\\n\\n${availableCommands}`\n        };\n        return msg;\n    }\n}\n\n// Handle unrecognized commands\nmsg.payload = {\n    chatId: chatId,\n    type: \"message\",\n    content: `‚ùì Unrecognized command or message. Please use one of the following commands:\\n${availableCommands}`\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 480,
        "wires": [
            [
                "bd7a7e42b72cef62"
            ]
        ]
    },
    {
        "id": "53ab33a4528ed1bb",
        "type": "debug",
        "z": "17bc7aeebae10c16",
        "name": "Print bot manager messages",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 540,
        "wires": []
    },
    {
        "id": "bd7a7e42b72cef62",
        "type": "telegram sender",
        "z": "17bc7aeebae10c16",
        "name": "MyAirQualityManagerBot sender",
        "bot": "4439cfb539ede99d",
        "haserroroutput": false,
        "outputs": 1,
        "x": 760,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "0fef79229c570c5b",
        "type": "join",
        "z": "17bc7aeebae10c16",
        "name": "Data Aggregation",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "payload[1].sensor_type",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "10",
        "count": "10",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 540,
        "y": 160,
        "wires": [
            [
                "9e895c89bb808370",
                "b0ba56552de82c50"
            ]
        ]
    },
    {
        "id": "9e895c89bb808370",
        "type": "influxdb batch",
        "z": "17bc7aeebae10c16",
        "influxdb": "63af76c7f02179a7",
        "precision": "",
        "retentionPolicy": "",
        "name": "Batch write to InfluxDB",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "my_org",
        "bucket": "air_quality",
        "x": 810,
        "y": 160,
        "wires": []
    },
    {
        "id": "4",
        "type": "catch",
        "z": "17bc7aeebae10c16",
        "name": "Catch Errors",
        "scope": [
            "08b6c15c01518af0"
        ],
        "uncaught": false,
        "x": 130,
        "y": 360,
        "wires": [
            [
                "5"
            ]
        ]
    },
    {
        "id": "5",
        "type": "switch",
        "z": "17bc7aeebae10c16",
        "name": "Check Error Type",
        "property": "error.message",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "429 Too Many Requests",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 330,
        "y": 360,
        "wires": [
            [
                "6"
            ]
        ]
    },
    {
        "id": "6",
        "type": "function",
        "z": "17bc7aeebae10c16",
        "name": "Extract Retry After",
        "func": "const match = msg.error.message.match(/retry after (\\d+)/);\nif (match) {\n    msg.retryAfter = parseInt(match[1], 10) * 1000; // Convert to milliseconds\n} else {\n    msg.retryAfter = 10000; // Default retry time (10 seconds)\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 360,
        "wires": [
            [
                "7"
            ]
        ]
    },
    {
        "id": "7",
        "type": "delay",
        "z": "17bc7aeebae10c16",
        "name": "Wait Retry Time",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "0",
        "randomLast": "0",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 780,
        "y": 360,
        "wires": [
            [
                "08b6c15c01518af0"
            ]
        ]
    }
]