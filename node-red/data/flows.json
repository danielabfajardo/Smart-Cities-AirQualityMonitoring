[
    {
        "id": "17bc7aeebae10c16",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a8cb1e729a2b76ed",
        "type": "mqtt-broker",
        "name": "mosquitto",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "c2d51192a5e06b33",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "InfluxDB",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influxdb:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "37409ed0ed704cfc",
        "type": "telegram bot",
        "botname": "MyAirQualityMonitoringBot",
        "usernames": "",
        "chatids": "7227781287",
        "baseapiurl": "",
        "testenvironment": false,
        "updatemode": "polling",
        "addressfamily": "",
        "pollinterval": 300,
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": 6667,
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": 8443,
        "publicbotport": 8443,
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "ae13f6ea803c0377",
        "type": "debug",
        "z": "17bc7aeebae10c16",
        "name": "Print data format",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 340,
        "wires": []
    },
    {
        "id": "ee28238ae82ab55c",
        "type": "mqtt in",
        "z": "17bc7aeebae10c16",
        "name": "",
        "topic": "/smartcities/airquality",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a8cb1e729a2b76ed",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 280,
        "wires": [
            [
                "49c93715f58ab854"
            ]
        ]
    },
    {
        "id": "49c93715f58ab854",
        "type": "function",
        "z": "17bc7aeebae10c16",
        "name": "Data Preprocessing",
        "func": "// Extract sensorId\nconst sensorId = msg.payload.sensorId;\n\n// Prepare fields by copying all payload properties\nmsg.payload = { ...msg.payload };\n\n// Set the measurement to the sensorId\nmsg.measurement = sensorId;\n\n// Return the updated message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 280,
        "wires": [
            [
                "ae13f6ea803c0377",
                "a8d8bd74d7d194df",
                "b0ba56552de82c50"
            ]
        ]
    },
    {
        "id": "a8d8bd74d7d194df",
        "type": "influxdb out",
        "z": "17bc7aeebae10c16",
        "influxdb": "c2d51192a5e06b33",
        "name": "Write to InfluxDB",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "my_org",
        "bucket": "air_quality",
        "x": 750,
        "y": 280,
        "wires": []
    },
    {
        "id": "08b6c15c01518af0",
        "type": "telegram sender",
        "z": "17bc7aeebae10c16",
        "name": "MyAirQualityMonitoringBot",
        "bot": "37409ed0ed704cfc",
        "haserroroutput": false,
        "outputs": 1,
        "x": 480,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "b0ba56552de82c50",
        "type": "function",
        "z": "17bc7aeebae10c16",
        "name": "Threshold evaluation",
        "func": "// Define threshold values\nconst thresholds = {\n    pm10: 100, // Threshold for PM10\n    co2: 1000, // Threshold for CO2\n    aqi: 150   // Threshold for AQI\n};\n\n// Extract sensor data\nconst data = msg.payload;\n\n// Initialize an alert message\nlet alertMessage = \"\";\n\n// Check each measurement against thresholds\nif (data.pm10 > thresholds.pm10) {\n    alertMessage += `PM10 is high (${data.pm10} Âµg/mÂ³)!\\n`;\n}\nif (data.co2 > thresholds.co2) {\n    alertMessage += `CO2 is high (${data.co2} ppm)!\\n`;\n}\nif (data.aqi > thresholds.aqi) {\n    alertMessage += `AQI is unhealthy (${data.aqi})!\\n`;\n}\n\n// Send an alert if any threshold is exceeded\nif (alertMessage) {\n    msg.payload = {\n        chatId: \"7227781287\", \n        type: \"message\",\n        content: `ðŸš¨ Alert for ${data.city}:\\n${alertMessage}`\n    };\n    return msg;\n} else {\n    return null; // No alert\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 400,
        "wires": [
            [
                "08b6c15c01518af0"
            ]
        ]
    }
]